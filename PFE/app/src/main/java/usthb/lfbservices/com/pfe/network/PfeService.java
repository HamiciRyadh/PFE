package usthb.lfbservices.com.pfe.network;

import java.util.List;

import io.reactivex.Observable;
import retrofit2.http.DELETE;
import retrofit2.http.Field;
import retrofit2.http.FormUrlEncoded;
import retrofit2.http.GET;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.Query;
import usthb.lfbservices.com.pfe.models.KeyValue;
import usthb.lfbservices.com.pfe.models.Product;
import usthb.lfbservices.com.pfe.models.ProductSalesPoint;
import usthb.lfbservices.com.pfe.models.Result;
import usthb.lfbservices.com.pfe.models.SalesPoint;

/**
 * An interface that is used by Retrofit to interact with the exposed methods of the Web Service.
 */

public interface PfeService {

    /**
     * Sends a GET request to retrieve a {@link List} of {@link Product} results corresponding
     * to the user's search string.
     * @param value The value of the user's search string.
     * @return An {@link Observable} of a {@link List} of {@link Product}
     */
    @GET("Search")
    Observable<List<Product>> searchFromQuery(@Query("value") String value);

    /**
     * Sends a GET request to retrieve a {@link Result} corresponding to the given {@link Product#productBarcode}.
     * @param productBarcode The barcode of the {@link Product} selected from the results list.
     * @return An {@link Observable} of a {@link Result} corresponding to the given {@link Product#productBarcode}
     */
    @GET("Search/{product_barcode}")
    Observable<Result> searchFromProductBarcode(@Path("product_barcode") String productBarcode);

    /**
     * Sends a GET request to retrieve a {@link List} of {@link Product} for a given
     * {@link usthb.lfbservices.com.pfe.models.Category#categoryId}.
     * @param category The id of the Category.
     * @return An {@link Observable} of a {@link List} of {@link Product} corresponding to the specified {@link usthb.lfbservices.com.pfe.models.Category#categoryId}.
     */
    @GET("Search/Category/{category_id}")
    Observable<List<Product>> searchCategory(@Path("category_id") int category);

    /**
     * Sends a POST request to verify whether the user exists or not.
     * @param mailAddress The mail address of the user.
     * @param password The password of the user.
     * @return An {@link Observable} of a boolean : true if the user exists, false otherwise.
     */
    @POST("User/Connect")
    @FormUrlEncoded
    Observable<Boolean> connect(@Field("mailAddress") String mailAddress,
                                @Field("password") String password);

    /**
     * Sends a POST request to add a new user.
     * @param mailAddress The mail address of the new user.
     * @param password The password of the new user.
     * @return An {@link Observable} of a boolean : true if the user has been added, false otherwise.
     */
    @POST("User/Register")
    @FormUrlEncoded
    Observable<Boolean> register(@Field("mailAddress") String mailAddress,
                                 @Field("password") String password);

    /**
     * Sends a PUT request to associate the device's Firebase token id to the current account.
     * @param deviceId The Firebase token id generated by {@link usthb.lfbservices.com.pfe.services.MyFirebaseInstanceIdService}.
     * @return An {@link Observable} of a boolean : true if the id has been added, false otherwise.
     */
    @PUT("Device/Add")
    @FormUrlEncoded
    Observable<Boolean> setFirebaseTokenId(@Field("deviceId") String deviceId);

    /**
     * Sends a POST request to update the device's Firebase token id.
     * @param previousDeviceId The previous value of Firebase token id.
     * @param newDeviceId The new value of Firebase token id.
     * @return An {@link Observable} of a boolean : true if the update succeeded, false otherwise.
     */
    @POST("Device/Update")
    @FormUrlEncoded
    Observable<Boolean> updateFirebaseTokenId(@Field("previousDeviceId") String previousDeviceId,
                                              @Field("newDeviceId") String newDeviceId);

    /**
     * Sends a DELETE request to remove the device's Firebase token id.
     * @param deviceId The current value of Firebase token id.
     * @return An {@link Observable} of a boolean : true if the deletion succeeded, false otherwise.
     */
    @DELETE("Device/Remove")
    Observable<Boolean> removeFirebaseTokenId(@Query("deviceId") String deviceId);

    /**
     * Sends a PUT request to add the currently identified user to the notifications list of the
     * given product for the given sales point.
     * @param salesPointId The {@link SalesPoint#salesPointId} of the selected sales point.
     * @param productBarcode The {@link Product#productBarcode} of the selected product.
     * @return An {@link Observable} of a boolean : true if the user has been added to the notifications list, false otherwise.
     */
    @PUT("Notification/AddToNotificationsList")
    @FormUrlEncoded
    Observable<Boolean> addToNotificationsList(@Field("sales_point_id") String salesPointId,
                                               @Field("product_barcode") String productBarcode);

    /**
     * Sends a DELETE request to remove the currently identified user from the notifications list of
     * the givent product for the givent sales point.
     * @param salesPointId The {@link SalesPoint#salesPointId} of the selected sales point.
     * @param productBarcode The {@link Product#productBarcode} of the selected product.
     * @return An {@link Observable} of a boolean : true if the deletion succeeded, false otherwise.
     */
    @DELETE("Notification/RemoveFromNotificationsList")
    Observable<Boolean> removeFromNotificationsList(@Query("sales_point_id") String salesPointId,
                                                    @Query("product_barcode") String productBarcode);

    /**
     * Sends a GET request to retrieve the informations of the {@link Product} associated with the given
     * {@link Product#productBarcode}.
     * @param productBarcode The {@link Product#productBarcode} of the {@link Product}.
     * @return An {@link Observable} of the {@link Product} associated with the given {@link Product#productBarcode}.
     */
    @GET("Products/{product_barcode}")
    Observable<Product> getProductDetails(@Path("product_barcode") String productBarcode);

    /**
     * Sends a GET request to retrieve the characteristics of the {@link Product} associated with the
     * given {@link Product#productBarcode}.
     * @param productBarcode The {@link Product#productBarcode} of the {@link Product}.
     * @return An {@link Observable} of a {@link List} of {@link KeyValue} representing the
     * characteristics of the {@link Product} associated with the given {@link Product#productBarcode}.
     */
    @GET("Search/TypeCaracteristic/{product_barcode}")
    Observable<List<KeyValue>> getProductCharacteristics(@Path("product_barcode") String productBarcode);

    /**
     * Sends a GET request to retrieve a {@link List} of {@link ProductSalesPoint} where the {@link Product}
     * identified by {@link Product#productBarcode} is proposed.
     * @param productBarcode The {@link Product#productBarcode} associated to the desired {@link Product}.
     * @return An {@link Observable} of a {@link List} of {@link ProductSalesPoint} associated with
     * the given {@link Product}.
     */
    @GET("Search/ProductSalesPoint/{product_barcode}")
    Observable<List<ProductSalesPoint>> getProductSalesPoint(@Path("product_barcode") String productBarcode);

    /**
     * Sends a GET request to retrieve a {@link List} of {@link String} representing the propositions
     * corresponding to the given search query.
     * @param query The search query for which the propositions are made.
     * @return An {@link Observable} of a {@link List} of {@link String} representing the search
     * propositions relative to the given search query.
     */
    @GET("Search/propositions")
    Observable<List<String>> getSearchPropositions(@Query("query") String query);

    /**
     * Sends a GET request to retrieve a {@link List} of {@link ProductSalesPoint} representing the
     * newest informations about the products' prices and quantities.
     * @param salesPointsIds A {@link List} of {@link String}.
     * @return An {@link Observable} of a {@link List} of {@link ProductSalesPoint} representing the
     * newest informations about the products and sales points sent.
     */
    @GET("ProductSalesPoint/getNewestInformations")
    Observable<List<ProductSalesPoint>> getNewestInformations(@Query("salesPointsIds") List<String> salesPointsIds);

}